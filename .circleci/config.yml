version: 2.1

orbs: 
  slack: circleci/slack@4.5.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack-name:
        default: ""
        description: Name of the stack to be destroyed
        type: string   

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws cloudformation delete-stack --stack-name "${AWS_CLOUDFORMATION_STACK_NAME}"
          environment:
            AWS_CLOUDFORMATION_STACK_NAME: <<parameters.stack-name>>

  fix_severe_security_vulnerabilities:
    description: Fixes node modules with critical security vulnerabilities in the application
    steps:
      - run:
          name: Fix security vulnerability
          command: npm audit fix --audit-level=critical --force
      - run:
          name: Check if security vulnerability is fixed
          command: npm audit --audit-level=critical
      - run:
          name: Some Security vulnerability fix failed
          command: fix_all_security_vulnerabilities
          when: on_fail

  fix_all_security_vulnerabilities:
    description: Fixes node modules with security vulnerabilities in the application
    steps:
      - run:
          name: Fix security vulnerability
          command: npm audit fix --force
      - run:
          name: Check if security vulnerability is fixed
          command: npm audit --audit-level=critical
      - run:
          name: Fail all security fixes
          command: echo "[X] Failed to completely fix security vulnerabilities"
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    # parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend &&\
            npm i &&\
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Backend build
          command: |
            # Your code here
            cd backend &&\
            npm i &&\
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
         keys: [frontend-test]

      # Your job code here
      - run:
          name: Run Frontend Test
          command: |
            # Your code here
            cd frontend &&\
            npm i &&\
            npm run test
      - run:
          name: Frontend Test Failed
          command: echo "[X] Failed to complete frontend test"
          when: on_fail
                
  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
         keys: [backend-test]

      # Your job code here
      - run:
          name: Run Backend Test
          command: |
            # Your code here
            cd backend &&\
            npm i &&\
            npm run test

      - run:
          name: Backend Test Failed
          command: echo "[X] Failed to complete backend test"
          when: on_fail
            
  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
         keys: [frontend-scan]

      # Your job code here
      - run:
          name: Run Frontend Scan
          command: |
            # Your code here
            cd frontend &&\
            npm i &&\
            npm install oauth-sign@^0.9.0 &&\
            npm audit --audit-level=critical
      - run:
          name: Frontend Scan Failed
          command: |
            echo "[Error] frontend scan failed." &&\
              echo "[Error] attempting to fix security vulnerabilities"
          when: on_fail
      - run:
          name: Fix severe security vulnerabilities
          command: fix_severe_security_vulnerabilities
          when: on_fail

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
         keys: [backend-scan]

      # Your job code here
      - run:
          name: Run Backend Scan
          command: |
            # Your code here
            cd backend &&\
            npm i &&\
            npm install oauth-sign@^0.9.0 &&\
            npm audit --audit-level=critical
      - run:
          name: Backend Scan Failed
          command: |
            echo "[Error] backend scan failed." &&\
              echo "[Error] attempting to fix security vulnerabilities"
          when: on_fail
      - run:
          name: Fix severe security vulnerabilities
          command: fix_severe_security_vulnerabilities
          when: on_fail

  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli

    parameters:
      stack-name:
        default: ""
        description: Name of the stack to be destroyed
        type: string 

    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udaPeople-project \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udaPeople-project \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add backend ip to ansible inventory
          command: |
            touch ~/inventory.txt &&\
              echo [all] > ~/inventory.txt &&\
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> inventory.txt
          
      - run:
          name: Successfully added backend ip to ansible inventory
          command: |
            echo "[Success] Successfully added backend ip to ansible inventory!!"
          when: on_success

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - slack/notify:
          channel: circle-ci-cloud-eng-aws-project
          event: pass
          template: basic_fail_1

      # Here's where you will add some code to rollback on failure  
      - run:
          name: Failed to add backend ip to ansible inventory
          command: |
            echo "[Error] Failed to add backend ip to ansible inventory!!"
          when: on_fail
       
      - destroy-environment:
          stack-name: !Sub udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}  

      - slack/notify:
          channel: circle-ci-cloud-eng-aws-project
          event: fail
          template: basic_fail_1  

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # Your code here
            exit 1
      - run:
          name: Configure server
          command: |
            # Your code here
            exit 1
      # Here's where you will add some code to rollback on failure      

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Run migrations
          command: |
            # Your code here
            exit 1
      - run:
          name: Send migration results to memstash
          command: |
            # Your code here
            exit 1
     # Here's where you will add some code to rollback on failure      

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure      
                    
  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure  

  cleanup:
      docker:
        # Docker image here
        - image: circleci/node:13.8.0
      steps:
        # Checkout code from git
        - run:
            name: Get old stack workflow id
            command: |
              # your code here
              export OldWorkflowID="the id here"
              export STACKS=[] #put the list of stacks here
        - run:
            name: Remove old stacks and files
            command: |
              if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
              then
                # your code here
              fi


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context:
            # Multiple contexts can be specified
            - CebTech-PLC-Trainee-Slack-Integration
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]