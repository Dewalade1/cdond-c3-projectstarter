version: 2.1

orbs:
  slack: circleci/slack@4.5.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack-name:
        default: ""
        description: Name of the stack to be destroyed
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            echo "[running] Destroying environment ${CIRCLE_WORKFLOW_ID:0:7}"
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive &&\
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} &&\
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
          
          environment:
            AWS_CLOUDFORMATION_STACK_NAME: <<parameters.stack-name>>

  fix_severe_security_vulnerabilities:
    description: Fixes node modules with critical security vulnerabilities in the application
    steps:
      - run:
          name: Fix security vulnerability
          command: npm audit fix --audit-level=critical --force
      - run:
          name: Check if security vulnerability is fixed
          command: npm audit --audit-level=critical
      - run:
          name: Some Security vulnerability fix failed
          command: fix_all_security_vulnerabilities
          when: on_fail

  fix_all_security_vulnerabilities:
    description: Fixes node modules with security vulnerabilities in the application
    steps:
      - run:
          name: Fix security vulnerability
          command: npm audit fix --force
      - run:
          name: Check if security vulnerability is fixed
          command: npm audit --audit-level=critical
      - run:
          name: Fail all security fixes
          command: echo "[X] Failed to completely fix security vulnerabilities"
          when: on_fail

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.

    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            export SUCCESS=$(curl -H "token: 0ca4f5ac-27b9-4529-a5d6-fa70207be8ee" \
            --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS=="1" )); 
            then
              cd backend
              npm i
            # Add revert code here. You can find this in the Getting Started section.
              npm run migration:revert
            fi

  trigger_slack_notif:
    steps:
      - slack/notify:
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*This is a text notification*",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: always

  notify_slack_on_pass:
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

  notify_slack_on_fail:
    steps:
      - slack/notify:
          event: pass
          template: basic_success_1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend &&\
            npm i &&\
            npm run build

      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Backend build
          command: |
            # Your code here
            cd backend &&\
            npm i &&\
            npm run build

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-test]

      # Your job code here
      - run:
          name: Run Frontend Test
          command: |
            # Your code here
            cd frontend &&\
            npm i &&\
            npm run test
      - run:
          name: Frontend Test Failed
          command: echo "[X] Failed to complete frontend test"
          when: on_fail

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-test]

      # Your job code here
      - run:
          name: Run Backend Test
          command: |
            # Your code here
            cd backend &&\
            npm i &&\
            npm run test

      - run:
          name: Backend Test Failed
          command: echo "[X] Failed to complete backend test"
          when: on_fail

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]

      # Your job code here
      - run:
          name: Run Frontend Scan
          command: |
            # Your code here
            cd frontend &&\
            npm i &&\
            npm install oauth-sign@^0.9.0 &&\
            npm audit --audit-level=critical

      - run:
          name: Frontend Scan Failed
          command: |
            echo "[Error] frontend scan failed." &&\
              echo "[Error] attempting to fix security vulnerabilities"
          when: on_fail

      - run:
          name: Fix severe security vulnerabilities
          command: fix_severe_security_vulnerabilities
          when: on_fail

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout

      # Restore from cache
      - restore_cache:
          keys: [backend-scan]

      # Your job code here
      - run:
          name: Run Backend Scan
          command: |
            # Your code here
            cd backend &&\
            npm i &&\
            npm install oauth-sign@^0.9.0 &&\
            npm audit --audit-level=critical
      - run:
          name: Backend Scan Failed
          command: |
            echo "[Error] backend scan failed." &&\
              echo "[Error] attempting to fix security vulnerabilities"
          when: on_fail
      - run:
          name: Fix severe security vulnerabilities
          command: fix_severe_security_vulnerabilities
          when: on_fail
          
  deploy-infrastructure:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli

    # parameters:
    # stack-id:
    #   default: $CIRCLE_WORKFLOW_ID:0:7
    #   description: Name of the stack to be destroyed
    #   type: env_var_name

    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udaPeople-project \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udaPeople-project \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"

      - run:
          name: Add backend ip to ansible inventory
          command: |
            touch ~/inventory.txt &&\
              echo [all] > ~/inventory.txt &&\
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --output text >> inventory.txt

      - run:
          name: Install required dependency
          command: yum install -y tar gzip

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt

      - run:
          name: Successfully added backend ip to ansible inventory
          command: |
            echo "[Success] Successfully added backend ip to ansible inventory!!"
          when: on_success

      # Here's where you will add some code to rollback on failure
      - run:
          name: Failed to add backend ip to ansible inventory
          command: |
            echo "[Error] Failed to add backend ip to ansible inventory!!"
          when: on_fail

      - destroy-environment
        # stack-name: udapeople-backend-<<parameters.stack-id>>

  configure-infrastructure:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ad:ab:a8:85:0c:7a:ec:c5:2d:f0:ea:57:f2:0d:90:12"]
      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # Your code here
            apk add --update tar &&\
            apk add --update gzip

      - run:
          name: Configure server
          command: |
            # Your code here
            apk add --update ansible &&\
            cd .circleci/ansible &&\
            ansible-playbook -i inventory.txt configure-server.yml

      # Here's where you will add some code to rollback on failure
      - run:
          name: Failed to configure infrastructure
          command: |
            echo "[Error] Failed to configure infrastructure!!"
          when: on_fail

      - destroy-environment

      # - trigger_slack_notif
      # - notify_slack_on_fail
      # - notify_slack_on_pass

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      - restore_cache:
          keys: [ backend-build ]

      - run:
          name: prepare environment for backend build
          command: |
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo "Preparing environment for backend build"
            echo ENVIRONMENT=$ENVIRONMENT >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env

      - run:
          name: Install environment dependencies
          command: |
            apk update
            apk upgrade
            apk add unzip 
            apk add curl
            apk add --update nodejs nodejs-npm
            /usr/local/bin/python -m pip install --upgrade pip

      - run:
          name: Install AWSCLI
          command: |
            pip install awscli --upgrade
            aws --version

      - run:
          name: Run migrations
          command: |
            # Your code here
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
          no_output_timeout: 30m

      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            # Your code here
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -H "Content-Type: text/plain" -H "token: 0ca4f5ac-27b9-4529-a5d6-fa70207be8ee" --request PUT --data "1" https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo "[Success] Database migration was successful, Memstash.io stash has been updated"
            fi

      - persist_to_workspace:
          root: ~/project
          paths:
            - backend

      # Here's where you will add some code to rollback on failure and slack notification
      - run:
          name: Failed to run migrations
          command: |
            echo "[Error] Failed to run migrations!!"
          when: on_fail

      - destroy-environment
      - revert-migrations

      # - trigger_slack_notif
      # - notify_slack_on_fail
      # - notify_slack_on_pass

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install dependencies
          command: |
            # your code here
            cd frontend
            curl -sL https://rpm.nodesource.com/setup_lts.x | bash -
            yum -y install nodejs
            yum -y install tar
            yum -y install gzip

      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(\
            aws ec2 describe-instances --query "Reservations[*].Instances[*].PublicIpAddress" \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
            cd frontend
            npm i
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

      # Here's where you will add some code to rollback on failure
      - run:
          name: Failed to deploy frontend
          command: |
            echo "[Error] Failed to deploy frontend!!"
          when: on_fail

      - destroy-environment
      - revert-migrations

      # - trigger_slack_notif
      # - notify_slack_on_fail

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - checkout

      # Add ssh keys with fingerprint
      - add_ssh_keys:
          fingerprints: ["ad:ab:a8:85:0c:7a:ec:c5:2d:f0:ea:57:f2:0d:90:12"]

      # attach workspace
      - attach_workspace:
          at: ~/

      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update ansible
            apk add --update nodejs npm
            apk add --update tar
            apk add --update gzip
            apk add --update curl
            apk add --update openssh-client

      - run:
          name: Deploy backend
          command: |
            # your code here
            cd backend
            npm i
            npm run build
            cp package* ./dist
            cd ..
            # Zip the directory
            tar -C backend -czvf /root/project/artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml

      # Here's where you will add some code to rollback on failure
      - run:
          name: Failed to deploy backend
          command: |
            echo "[Error] Failed to deploy backend!!"
          when: on_fail

      - destroy-environment
      - revert-migrations

      # - trigger_slack_notif
      # - notify_slack_on_fail

  smoke-test:
    docker:
      # Lightweight Docker image
      - image: python:3.7-alpine3.11
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
            apk add --update nodejs npm
            apk add --update tar
            apk add --update gzip
            apk add --update curl
            apk add --update openssh-client

      - run:
          name: Install AWSCLI
          command: |
            # your code here
            pip install awscli
            aws --version

      - attach_workspace:
          at: ~/

      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(\
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API URL: ${API_URL}"

      - run:
          name: Backend smoke test.
          command: |
            # your code here
            export BACKEND_IP=$(\
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL=${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
              echo "[success] Backend URL: ${API_URL}"
              return 0
            else
              echo "[Error] No response from backend URL"
              return 1
            fi

      - run:
          name: Frontend smoke test.
          command: |
            # your code here
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
              # Change this to 0 after the job fails
              echo [success] Welcome to Udapeople!!
              return 1
            else
              echo [failed] No response from frontend
              return 1
            fi
      # Here's where you will add some code to rollback on failure
      - run:
          name: Failed smoke tests
          command: |
            echo "[Error] Failed smoke tests!!"
          when: on_fail

      - destroy-environment
      - revert-migrations

      # - trigger_slack_notif
      # - notify_slack_on_fail

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout

      - run:
          name: Install dependencies
          command: |
            # your code here
            yum -y install nodejs
            yum -y install tar
            yum -y install gzip
            yum -y install curl
            
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name ProductionInfraStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople

      # Here's where you will add some code to rollback on failure
      - run:
          name: Could not perform cloudfront update
          command: echo "[Error] Could not perform cloudfront update!!"
          when: on_fail

      - destroy-environment
      - revert-migrations

      # - trigger_slack_notif
      # - notify_slack_on_fail

  cleanup:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
              echo OldWorkflowID: "${OldWorkflowID}"
              echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack Names: "${STACKS[@]}"

      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              # your code here
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
            else
              aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
              aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
              aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            fi
      
      # - trigger_slack_notif
      # - notify_slack_on_fail

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          context:
            # Multiple contexts can be specified
            - CebTech-PLC-Trainee-Slack-Integration
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          context:
            - CebTech-PLC-Trainee-Slack-Integration
      - run-migrations:
          requires: [configure-infrastructure]
          context:
            - CebTech-PLC-Trainee-Slack-Integration
      - deploy-frontend:
          requires: [run-migrations]
          context:
            - CebTech-PLC-Trainee-Slack-Integration
      - deploy-backend:
          requires: [run-migrations]
          context:
            - CebTech-PLC-Trainee-Slack-Integration
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
          context:
            - CebTech-PLC-Trainee-Slack-Integration
      - cleanup:
          requires: [cloudfront-update]
          context:
            - CebTech-PLC-Trainee-Slack-Integration
